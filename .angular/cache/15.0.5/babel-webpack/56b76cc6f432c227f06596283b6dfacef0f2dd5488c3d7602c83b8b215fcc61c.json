{"ast":null,"code":"import { map } from \"rxjs\";\nimport { LocationByZIP } from \"../../model/locationByZIP\";\nimport { WeatherDetails } from \"../../model/weatherDetails\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../sharedService/shared.service\";\nvar WeatherService = /** @class */function () {\n  function WeatherService(http, sharedService) {\n    this.http = http;\n    this.sharedService = sharedService;\n  }\n  // findLocationByZipCode (zipCode: string) : Observable<LocationByZIP>{\n  //   return this.http.get(`${this.sharedService.baseUrl}/geo/1.0/zip?zip=${zipCode},US&appid=${this.sharedService.api_ID}`)\n  // }\n  // get lat and long coordinates, city name , zipcode and country from zip code\n  WeatherService.prototype.findLocationByZipCode = function (zipCode) {\n    return this.http.get(\"\".concat(this.sharedService.baseUrl, \"/geo/1.0/zip?zip=\").concat(zipCode, \",US&appid=\").concat(this.sharedService.api_ID)).pipe(map(function (response) {\n      var location = new LocationByZIP();\n      location.country = response.country;\n      location.lat = response.lat;\n      location.lon = response.lon;\n      location.name = response.name;\n      location.zip = response.zip;\n      return location;\n    }));\n  };\n  // get weather details from lat and lon\n  WeatherService.prototype.getWeatherDetails = function (zipcode) {\n    return this.http.get(\"\".concat(this.sharedService.baseUrl, \"/data/2.5/weather?zip=\").concat(zipcode, \"&appid=\").concat(this.sharedService.api_ID)).pipe(map(function (response) {\n      var weatherDetails = new WeatherDetails();\n      weatherDetails.zipCode = zipcode;\n      weatherDetails.nameCity = response.name;\n      weatherDetails.temp = response.main.temp;\n      weatherDetails.maxTemperature = response.main.temp_max;\n      weatherDetails.minTemperature = response.main.temp_min;\n      weatherDetails.weatherDescription = response.weather[0].description;\n      weatherDetails.mainWeatherDescription = response.weather[0].main;\n      return weatherDetails;\n    }));\n  };\n  WeatherService.prototype.fiveDaysForecastData = function (zipcode) {\n    var url = \"\".concat(this.sharedService.baseUrl, \"/data/2.5/forecast?zip=\").concat(zipcode, \"&appid=\").concat(this.sharedService.api_ID);\n    return this.http.get(url).pipe(map(function (response) {\n      var weatherList = response.list;\n      var fiveDayForecast = [];\n      var currentDate = new Date();\n      var nextFiveDays = new Set();\n      var weekdayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      // Loop through each data point in the array\n      for (var _i = 0, weatherList_1 = weatherList; _i < weatherList_1.length; _i++) {\n        var data = weatherList_1[_i];\n        // Extract the date and time from the dt_txt field\n        var dtTxt = data.dt_txt;\n        var date = new Date(dtTxt);\n        // Extract the year, month, and day from the date\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var day = date.getDate();\n        var weekdayName = weekdayNames[date.getDay()];\n        // Create a unique key representing the date (year-month-day)\n        var key = \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n        // Check if the key is already present in the nextFiveDays set\n        if (!nextFiveDays.has(key)) {\n          // Add the key to the set to mark the day as included in the forecast\n          nextFiveDays.add(key);\n          // data.weekday = weekdayName;\n          var forecastData = {\n            nameCity: response.city.name,\n            weatherDescription: data.weather[0].main,\n            highTemperature: data.main.temp_max,\n            lowTemperature: data.main.temp_min,\n            DayName: weekdayName\n          };\n          // Push the data point to the fiveDayForecast array\n          fiveDayForecast.push(forecastData);\n        }\n        // Stop the loop if we have reached the desired 5-day forecast\n        if (nextFiveDays.size >= 5) {\n          break;\n        }\n      }\n      // Return the filtered forecast data\n      return fiveDayForecast;\n    }));\n  };\n  WeatherService.ɵfac = function WeatherService_Factory(t) {\n    return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SharedService));\n  };\n  WeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherService,\n    factory: WeatherService.ɵfac,\n    providedIn: \"root\"\n  });\n  return WeatherService;\n}();\nexport { WeatherService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}