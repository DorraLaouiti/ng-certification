{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Dorra\\\\ng-certification-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\Dorra\\\\ng-certification-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dorra\\\\ng-certification-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { map } from 'rxjs';\nimport { LocationByZIP } from '../../model/locationByZIP';\nimport { WeatherDetails } from '../../model/weatherDetails';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../sharedService/shared.service\";\nexport var WeatherService = /*#__PURE__*/(function () {\n  var WeatherService = /*#__PURE__*/function () {\n    function WeatherService(http, sharedService) {\n      _classCallCheck(this, WeatherService);\n\n      this.http = http;\n      this.sharedService = sharedService;\n    } // findLocationByZipCode (zipCode: string) : Observable<LocationByZIP>{\n    //   return this.http.get(`${this.sharedService.baseUrl}/geo/1.0/zip?zip=${zipCode},US&appid=${this.sharedService.api_ID}`)\n    // }\n    // get lat and long coordinates, city name , zipcode and country from zip code\n\n\n    _createClass(WeatherService, [{\n      key: \"findLocationByZipCode\",\n      value: function findLocationByZipCode(zipCode) {\n        return this.http.get(\"\".concat(this.sharedService.baseUrl, \"/geo/1.0/zip?zip=\").concat(zipCode, \",US&appid=\").concat(this.sharedService.api_ID)).pipe(map(function (response) {\n          var location = new LocationByZIP();\n          location.country = response.country;\n          location.lat = response.lat;\n          location.lon = response.lon;\n          location.name = response.name;\n          location.zip = response.zip;\n          return location;\n        }));\n      } // get weather details from lat and lon\n\n    }, {\n      key: \"getWeatherDetails\",\n      value: function getWeatherDetails(zipcode) {\n        return this.http.get(\"\".concat(this.sharedService.baseUrl, \"/data/2.5/weather?zip=\").concat(zipcode, \"&appid=\").concat(this.sharedService.api_ID)).pipe(map(function (response) {\n          var weatherDetails = new WeatherDetails();\n          weatherDetails.zipCode = zipcode;\n          weatherDetails.nameCity = response.name;\n          weatherDetails.temp = response.main.temp;\n          weatherDetails.maxTemperature = response.main.temp_max;\n          weatherDetails.minTemperature = response.main.temp_min;\n          weatherDetails.weatherDescription = response.weather[0].description;\n          weatherDetails.mainWeatherDescription = response.weather[0].main;\n          return weatherDetails;\n        }));\n      } // fiveDaysForecastData(zipcode: string): Observable<Forecast[]> {\n      //   const url = `${this.sharedService.baseUrl}/data/2.5/forecast?zip=${zipcode}&appid=${this.sharedService.api_ID}`;\n      //   return this.http.get(url).pipe(\n      //     map((response: any) => {\n      //       const weatherList: any[] = response.list;\n      //       const currentDate = new Date();\n      //       const fiveDayForecast = weatherList.filter((data: any) => {\n      //         const displayedDate = new Date(data.dt_txt);\n      //         const hour = Number(data.dt_txt.substr(11, 2)); // hours\n      //         if \n      // //       });\n      //       return weatherList;\n      //       // const currentDate = new Date();\n      //       // // Filter the array to keep only the data points for the next 5 days\n      //       // const fiveDayForecast = weatherList.filter((data: any) => {\n      //       //   const date = new Date(data.dt_txt);\n      //       //   const daysDifference = Math.floor(((date.getTime() )- (currentDate.getTime())) / (1000 * 60 * 60 * 24));\n      //       //   return daysDifference >= 0 && daysDifference < 5;\n      //       // });\n      //       // // Return the filtered forecast data\n      //       // return fiveDayForecast;\n      //     })\n      //   );\n      // }\n\n    }, {\n      key: \"fiveDaysForecastData\",\n      value: function fiveDaysForecastData(zipcode) {\n        var url = \"\".concat(this.sharedService.baseUrl, \"/data/2.5/forecast?zip=\").concat(zipcode, \"&appid=\").concat(this.sharedService.api_ID);\n        return this.http.get(url).pipe(map(function (response) {\n          var weatherList = response.list;\n          var fiveDayForecast = [];\n          var currentDate = new Date();\n          var nextFiveDays = new Set(); // Loop through each data point in the array\n\n          var _iterator = _createForOfIteratorHelper(weatherList),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var data = _step.value;\n              // Extract the date and time from the dt_txt field\n              var dtTxt = data.dt_txt;\n              var date = new Date(dtTxt); // Extract the year, month, and day from the date\n\n              var year = date.getFullYear();\n              var month = date.getMonth();\n              var day = date.getDate(); // Create a unique key representing the date (year-month-day)\n\n              var key = \"\".concat(year, \"-\").concat(month, \"-\").concat(day); // Check if the key is already present in the nextFiveDays set\n\n              if (!nextFiveDays.has(key)) {\n                // Add the key to the set to mark the day as included in the forecast\n                nextFiveDays.add(key); // Push the data point to the fiveDayForecast array\n\n                fiveDayForecast.push(data);\n              } // Stop the loop if we have reached the desired 5-day forecast\n\n\n              if (nextFiveDays.size >= 5) {\n                break;\n              }\n            } // Return the filtered forecast data\n\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return fiveDayForecast;\n        }));\n      }\n    }]);\n\n    return WeatherService;\n  }();\n\n  WeatherService.ɵfac = function WeatherService_Factory(t) {\n    return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SharedService));\n  };\n\n  WeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherService,\n    factory: WeatherService.ɵfac,\n    providedIn: 'root'\n  });\n  return WeatherService;\n})();","map":null,"metadata":{},"sourceType":"module"}